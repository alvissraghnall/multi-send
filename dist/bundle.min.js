(function () {
    'use strict';

    const ABI = [
        {
            "inputs": [],
            "stateMutability": 'payable',
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "sent",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "maxAvailable",
                    "type": "uint256"
                }
            ],
            "name": "InsufficientBalance",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address payable[]",
                    "name": "addresses",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]"
                }
            ],
            "name": "sendAll",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ];

    let web3js;
    let contract;
    let acct;
    function initweb3() {
        var _a;
        web3js = new Web3(Web3.givenProvider || "ws://localhost:8545");
        getContract();
        (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a.enable();
    }
    const getContract = async () => {
        acct = web3js.eth.defaultAccount = (await web3js.eth.getAccounts())[0];
        await web3js.eth.net.getId();
        console.log(await web3js.eth.getBalance(acct));
        contract = new web3js.eth.Contract(ABI, "0xacF8a727309b97A0354398D96985da05C8354753");
        console.log(web3js.eth.defaultAccount, contract, contract.methods);
    };
    function sendFunds() {
        const addresses = formFields.map(field => field.address);
        const amounts = formFields.map(field => field.amount);
        console.log(addresses, amounts);
        try {
            contract.methods.sendAll(addresses, amounts).send({
                gas: 40000,
                from: acct
            });
        }
        catch (error) {
            const modal = document.querySelector(".modal");
            const exit = document.querySelector(".modal-close");
            const modalContentEl = document.querySelector(".modal-content");
            modalContentEl.innerText = error.message;
            if (error.code === "INVALID_ARGUMENT") {
                modalContentEl.innerText = "You entered an invalid Ethereum address. Check and try again!";
            }
            modal.classList.add("open");
            exit === null || exit === void 0 ? void 0 : exit.addEventListener("click", ev => {
                ev.preventDefault();
                modal.classList.remove("open");
            });
            setTimeout(() => {
                modal.classList.remove("open");
            }, 4900);
            console.log(error, error.message);
        }
    }
    let formFields = [];
    const setupFields = () => {
        const addresses = document.getElementsByName("address");
        const amounts = document.getElementsByName("amount");
        for (let i = 0; i < addresses.length; i++) {
            const address = addresses[i];
            const amount = amounts[i];
            formFields.push({
                address: address.value.trimStart(),
                amount: Number(amount.value)
            });
        }
        console.log(formFields);
    };
    function createRipple(event) {
        const button = event.currentTarget;
        const circle = document.createElement("span");
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;
        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - (button.offsetLeft + radius)}px`;
        circle.style.top = `${event.clientY - (button.offsetTop + radius)}px`;
        circle.classList.add("submit-btn-ripple");
        const ripple = button.getElementsByClassName("submit-btn-ripple")[0];
        if (ripple) {
            ripple.remove();
        }
        button.appendChild(circle);
    }
    function addFormRow(ev) {
        document.getElementById("page-form");
        document.querySelectorAll(".form-row")[-1];
        const button = ev.currentTarget;
        const new_row = document.createElement("div");
        new_row.classList.add("form-row");
        const inputs = `<input type="text" name="address" id="address" class="address-input" placeholder="Address">
      <input type="number" name="amount" id="amount" class="amount-input" placeholder="Amount">`;
        new_row.insertAdjacentHTML("afterbegin", inputs);
        button.insertAdjacentElement("beforebegin", new_row);
    }
    document.querySelector(".new-field-button").addEventListener("click", (ev) => {
        addFormRow(ev);
    });
    document.getElementById("page-form").addEventListener("submit", (ev) => {
        ev.preventDefault();
        createRipple(ev);
        setupFields();
        sendFunds();
        formFields = [];
    });
    window.addEventListener('load', initweb3);

})();
